# -*- coding: utf-8 -*-
"""Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qirLNmEcKoX4GUbys-JUaqZfdS6HyTPb
"""

import torch
import torch.nn as nn
import torch.nn.functional as F

dropout_value = 0.03
class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        # CONVOLUTION BLOCK 1
        self.convblock1 = nn.Sequential(
            nn.Conv2d(in_channels=3, out_channels=32, kernel_size=(3, 3), padding=1, bias=False),
            nn.ReLU(),
            nn.BatchNorm2d(32),
            nn.Dropout(dropout_value),

            nn.Conv2d(in_channels=32, out_channels=64, kernel_size=(3, 3), padding=1, bias=False),
            nn.ReLU(),
            nn.BatchNorm2d(64),
            nn.Dropout(dropout_value)
        )

        # Transition Block1
        self.trans1 = nn.Sequential(
            nn.Conv2d(in_channels=64, out_channels=32, kernel_size=(1, 1), stride=2), 
            nn.ReLU(),
        ) 

        # CONVOLUTION BLOCK 2
        self.convblock2 = nn.Sequential(
            nn.Conv2d(in_channels=32, out_channels=64, kernel_size=(3, 3), padding=1, bias=False),
            nn.ReLU(),
            nn.BatchNorm2d(64),
            nn.Dropout(dropout_value),

            ## Depthwise Seperable Convolution1
            nn.Conv2d(in_channels=64,out_channels=128, kernel_size=(3, 3),  padding=1,groups=32 ,bias = False),  
            nn.Conv2d(in_channels=128, out_channels=64, kernel_size=(1, 1), padding=1, bias = False),   
            nn.ReLU(),
            nn.BatchNorm2d(64),
            nn.Dropout2d(dropout_value),
        ) 

        # Transition Block 2
        self.trans2 = nn.Sequential(
            nn.Conv2d(in_channels=64, out_channels=32, kernel_size=(1, 1), stride=2), 
            nn.ReLU(),
        )  

        # CONVOLUTION BLOCK 3
        self.convblock3 = nn.Sequential(
            nn.Conv2d(in_channels=32, out_channels=64, kernel_size=(3, 3), padding=1, bias=False,dilation=2),
            nn.ReLU(),            
            nn.BatchNorm2d(64),
            nn.Dropout(dropout_value),

            ## Dilation Block
            nn.Conv2d(in_channels=64, out_channels=32, kernel_size=(3, 3), padding=1, bias=False),
            nn.ReLU(),            
            nn.BatchNorm2d(32),
            nn.Dropout(dropout_value),
        )

        # Transition Block 3
        self.trans3 = nn.Sequential(
            nn.Conv2d(in_channels=32, out_channels=16, kernel_size=(1, 1), stride=2), 
            nn.ReLU(),
        ) 
        
        # CONVOLUTION BLOCK 4
        self.convblock4 = nn.Sequential(
            nn.Conv2d(in_channels=16, out_channels=32, kernel_size=(3, 3), padding=1, bias=False),
            nn.ReLU(),
            nn.BatchNorm2d(32),
            nn.Dropout(dropout_value),

            nn.Conv2d(in_channels=32, out_channels=16, kernel_size=(3, 3), padding=1, bias=False),
            nn.ReLU(),
            nn.BatchNorm2d(16),
            nn.Dropout(dropout_value)
        )

        # GAP
        self.gap = nn.Sequential(
            nn.AdaptiveAvgPool2d(1)
        )  

        self.fc = nn.Sequential(
            nn.Linear(16, 10)
        )

    def forward(self, x):
        x = self.convblock1(x)
        x = self.trans1(x)

        x = self.convblock2(x)
        x = self.trans2(x)

        x = self.convblock3(x)
        x = self.trans3(x)

        x = self.convblock4(x)
        x = self.gap(x) 

        x = x.view(x.size(0), -1)
        x = self.fc(x)
        return F.log_softmax(x, dim=-1)